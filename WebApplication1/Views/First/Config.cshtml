@model ImageServiceWeb.Models.ConfigModel
@{
    ViewBag.Title = "Config";
}

<h2>Config</h2>
   
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="table table-striped-group">
        <hr />
        <p style="">
            @Html.LabelFor(m => m.OutPutDir, new { @class = "col-md-2 control-label" })

            @Html.DisplayFor(modelItem => modelItem.OutPutDir, new { @class = "col-md-2 control-label" })
        </p>
        <p>
            @Html.LabelFor(m => m.SourceName, new { @class = "col-md-2 control-label" })

            @Html.DisplayFor(m => m.SourceName, new { @class = "col-md-2 control-label" })
        </p>
        <p>
            @Html.LabelFor(m => m.LogName, new { @class = "col-md-2 control-label" })

            @Html.DisplayFor(m => m.LogName, new { @class = "col-md-2 control-label" })
        </p>
        <p>
            @Html.LabelFor(m => m.ThumbnailSize, new { @class = "col-md-2 control-label" })

            @Html.DisplayFor(m => m.ThumbnailSize, new { @class = "col-md-2 control-label" })
        </p>
        <br />
        <p><label>The Handlers:</label></p>
        <ul class="nav nav-pills nav-stacked">

            @foreach (var item in Model.HandlersArr)
            {
                <li>
                    <a href="#">
                        @Html.DisplayFor(modelItem => item)

                    </a>
                </li>
            }
        </ul>

    </div>

}


<script>
    $("li").click(function () {
        
        var itemText = $(this).text();
        //delete from the item unnecessary sapces and break line  
        var path = itemText.replace(/\s\s+/g, '');
        localStorage.setItem('objectToPass', path);
        window.location.href = "RemoveHandler";
            
    });

    function remove(x) {
        $(x).hide;
    }
</script>
